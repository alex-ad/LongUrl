using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using LongUrl.Models;

namespace LongUrl.Core
{
    public class MalwareScanner
    {
        private readonly string _url;
        private readonly ResponseUrl _response;

        public MalwareScanner(ResponseUrl responseUrl)
        {
            if (string.IsNullOrEmpty(responseUrl.Url?.Last())) throw new ArgumentNullException(nameof(responseUrl.Url), "The URL cannot be empty");
            _response = responseUrl;
            _url = responseUrl.Url.Last();
        }

        public async Task Go()
        {
            await AntivirusCheck(_url);
            await SafeBrowsingCheck(_url);
        }

        private async Task AntivirusCheck(string url)
        {
            var httpClient = new HttpClient();
            var request = "http://online.drweb.com/result/?url=" + url;
            var httpResponse = await httpClient.GetAsync(request);

            if (httpResponse.StatusCode != HttpStatusCode.OK) return;

            var responseMessage = httpResponse.Content.ReadAsStringAsync().Result;
            var posStart = responseMessage.IndexOf("<!-- scan report begin -->", StringComparison.OrdinalIgnoreCase);
            posStart = posStart < 0 ? posStart : posStart + "<!-- scan report begin -->".Length;
            var posEnd = responseMessage.LastIndexOf("<!-- scan report end -->", StringComparison.OrdinalIgnoreCase);

            if (responseMessage.Contains("<!-- X_SCAN_STATE: CLEAN -->", StringComparison.OrdinalIgnoreCase))
                _response.AntivirusStatus = AntivirusStatusType.Clear;
            else if (responseMessage.Contains("<!-- X_SCAN_STATE: INFECTED -->", StringComparison.OrdinalIgnoreCase))
                _response.AntivirusStatus = AntivirusStatusType.Infected;
            else _response.AntivirusStatus = AntivirusStatusType.Error;

            if (posStart < 0 || posEnd < 0) return;

            _response.AntivirusMessage = responseMessage.Substring(posStart, posEnd - posStart);
        }

        private async Task SafeBrowsingCheck(string url)
        {
            var httpJson = "{\"client\":{\"clientId\":\"longurlsafe\",\"clientVersion\":\"1.0.2\"},\"threatInfo\":{\"threatTypes\":[\"MALWARE\", \"SOCIAL_ENGINEERING\"],\"platformTypes\":[\"ALL_PLATFORMS\"],\"threatEntryTypes\":[\"URL\"],\"threatEntries\":[{\"url\":\""+url+"\"}]}}";
            var requestUri =
                "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=AIzaSyD0Kn_Mf2gs3EOEIxlwg1HYcdzS6_LxPe0";
            var httpContent = new StringContent(httpJson, Encoding.UTF8, "application/json");
            var httpClient = new HttpClient();

            var httpResponse = await httpClient.PostAsync(requestUri, httpContent);
            var result = httpResponse.Content.ReadAsStringAsync().Result.Trim();

            _response.SafeBrowsing = result.IndexOf("threatType", StringComparison.OrdinalIgnoreCase) <= 0;
        }
    }
}
